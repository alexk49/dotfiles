" turns off vi settings
set nocompatible

" set leader key to space
let mapleader=" "

" map local local to be used with plugins
let maplocalleader=","

" allow mouse use
set mouse=a

" configure backspace to work like a backspace
set backspace=eol,start,indent

" set default encoding
set encoding=utf-8

" set default file format endings
set fileformats=unix,dos,mac

" make vim paste from external programs with just p
set clipboard^=unnamed,unnamedplus

" when you search for a file, search through every sub directory
set path+=.,**

" automatically change directory to currently open file
set autochdir

" when splitting set new file to appear in right window
set splitright

" split new files appear below
set splitbelow

" display all matching files when tab complete
set wildmenu

" ignore case on wildmenu
set wildignorecase

" press :b <tab> to search through current buffer list
" can also use :<tab> to search through commands
set wildchar=<Tab> wildmode=full

" ignore swp files in tabs
setglobal wildignore+=*.swp

" allow switching of buffers without saving
set hidden

" file detection on
filetype on

" plugins work for specifc file types
filetype plugin on

" indent for specific file types
filetype indent on

" allows case insensitive searching
set ignorecase

" improve search
set smartcase

" highlight searching
set hlsearch

" show search as you type
set incsearch

" set syntax highlighting
syntax on

" sets line numbers
set number

" relative line numbers
set relativenumber

" set command history
set history=1000

" matches indent on new lines
set autoindent

" indent new lines based on rules
set smartindent

" Set tab width to 4 columns.
set tabstop=4

" Use space characters instead of tabs.
set expandtab
" indent a new line the same amount as line just typed
set shiftwidth=4

" make tab work better
set smarttab

" this will make vim wrap text on word rather than char
set linebreak

" Disable audible bell because it's annoying.
set noerrorbells visualbell t_vb=

" set seperate folder for swap and backup files
let tmp_dir = expand('~/.vim/tmp//')

if !isdirectory(tmp_dir)
    call mkdir(tmp_dir, "p", 0700)
endif

" set swap files and backup files to tmp dir
set swapfile
let &directory=tmp_dir
let &backupdir=tmp_dir

" protect against crash-during-write
set writebackup

" but do not persist backup after successful write
set nobackup

" use rename-and-write-new method whenever safe
set backupcopy=auto

" seperate undo files to avoid compatability errors
if has('nvim')
    let undo_dir_path = expand('~/.config/nvim/undos//')
else
    let undo_dir_path = expand('~/.vim/undos//')
endif

if has("persistent_undo")
    " make undo dir if it doesn't exist
    if !isdirectory(undo_dir_path)
        call mkdir(undo_dir_path, "p", 0700)
    endif
    " persist the undo tree for each file
    let &undodir=undo_dir_path
    set undofile
endif

" ====================
" light weight status line settings for vim
" ====================

" variables for current mode to be passed to status line
let g:currentmode={
       \ 'n'  : 'NORMAL ',
       \ 'v'  : 'VISUAL ',
       \ 'V'  : 'V·Line ',
       \ "\<C-V>" : 'V·Block ',
       \ 'i'  : 'INSERT ',
       \ 'R'  : 'R ',
       \ 'Rv' : 'V·Replace ',
       \ 'c'  : 'Command ',
       \ 't'  : 'Terminal ',
       \}

" status line display
set laststatus=2
set statusline=
set statusline+=\ %{toupper(g:currentmode[mode()])} " sets current mode using above function
set statusline+=%F " shows the path to file
set statusline+=%= " right indents the below
set statusline+=\ %{&fileencoding?&fileencoding:&encoding}
set statusline+=\ line:%l\ col:%c " show current line and column
set statusline+=\ End:%L

" set dark background, mainly needed for gvim
set background=dark

" windows only options
if has("win32")
    " on windows make GUI vim open in full screen
    au GUIEnter * simalt ~x
    " clearly visible font for gvim windows but displays badly for linux
    set guifont=Lucida_Console:h11:b
endif

" remaps

" remaps to make vim use virtual lines when using gj without count
" but still use physical lines when used with count
noremap <silent> <expr> j (v:count == 0 ? 'gj' : 'j')
noremap <silent> <expr> k (v:count == 0 ? 'gk' : 'k')

" quickly remove highlights with double tap esc
nnoremap <Esc><Esc> :noh<Return><Esc>

" quickly remove highlights with double tap esc
nnoremap <M-l> :noh<Return><Esc>

" Change indent continuously
vmap < <gv
vmap > >gv

" add time stamp with ts in normal mode
nnoremap ts !!date "+\%Y-\%m-\%d \%H:\%M"<Return><Esc>

" remap vt to vertical terminal
" this checks your in command mode first
" and checks vt is the whole command before executing
cabbrev <expr> vt getcmdtype() ==# ':' && getcmdline() ==# 'vt' ? 'vertical terminal' : 'vt'

" =====================
" plugins with vim plug
" =====================

" allows more matching using the % on brackets etc
packadd! matchit

" vim plug plugin manager
call plug#begin('~/.vimfiles/plugged')

" color scheme
Plug 'sainnhe/everforest'

" useful for working with html tags
Plug 'tpope/vim-surround'

" todo.txt highlights and shortcuts
Plug 'freitass/todo.txt-vim'

" switch panes with tmux with same keys
Plug 'christoomey/vim-tmux-navigator'

" zen mode
Plug 'junegunn/goyo.vim'

" linters
Plug 'dense-analysis/ale'

" shortcuts for writing html
Plug 'mattn/emmet-vim'

" async background tasks, needed for markdown preview
Plug 'tpope/vim-dispatch'

if has('nvim')

    " LSP Support
    Plug 'neovim/nvim-lspconfig'             " Required
    Plug 'williamboman/mason.nvim',          " Optional
    Plug 'williamboman/mason-lspconfig.nvim' " Optional

    " Autocompletion
    Plug 'hrsh7th/nvim-cmp'     " Required
    Plug 'hrsh7th/cmp-nvim-lsp' " Required
    Plug 'L3MON4D3/LuaSnip'     " Required

    Plug 'VonHeikemen/lsp-zero.nvim', {'branch': 'v2.x'}

    endif

call plug#end()

" colorscheme settings for everforest
if has('termguicolors')
    set termguicolors
endif

try
    " set colorscheme
    let g:everforest_better_performance = 1
    colorscheme everforest
catch
    colorscheme desert
endtry

" todo.txt config for all .txt files in notes folder
autocmd BufNewFile,BufRead $HOME/notes/**.txt,**/*howto*.txt setlocal filetype=todo

" set shell syntax for .bats test files
autocmd BufNewFile,BufRead *.bats setlocal filetype=sh
